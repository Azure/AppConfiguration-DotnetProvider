#################################################################################
#   Onebranch Pipelines - Buddy MSBuild (CDPXMigrated)                          #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger:
  - main

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 0
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  CDP_USER_SOURCE_FOLDER_CONTAINER_PATH: $(Build.SourcesDirectory)
  CDP_DEFINITION_BUILD_COUNT_DAY: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  CDP_DEFINITION_BUILD_COUNT_MONTH: $[counter(format('{0:yyyyMM}', pipeline.startTime), 1)]
  CDP_DEFINITION_BUILD_COUNT_YEAR: $[counter(format('{0:yyyy}', pipeline.startTime), 1)]
  NUGET_XMLDOC_MODE: none

  # Docker image which is used to build the project https://aka.ms/obpipelines/containers
  # Image used in CDPX build: cdpxwin1809.azurecr.io/global/vse2019:16.8.2
  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2022:latest'

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main
    - repository: AppConfiguration-DotnetProvider # The name used to reference this repository in the checkout step
      type: github
      endpoint: azure
      name: Azure/AppConfiguration-DotnetProvider
      ref: refs/heads/main

extends:
  template: v2/OneBranch.NonOfficial.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      # credscan:
      #   suppressionsFile: $(Build.SourcesDirectory)\.config\CredScanSuppressions.json
      binskim:
        break: true # always break the build on binskim issues. You can disable it by setting to 'false'
      policheck:
        break: true # always break the build on policheck issues. You can disable it by setting to 'false'
      # baseline:
      #   baselineFile: $(Build.SourcesDirectory)\.gdn\global.gdnbaselines
      cg:
        failOnAlert: false
      perStage:
        sdl_sources:
          checkout_all_repos: true

    stages:
    - stage: build
      jobs:
      - job: main
        pool:
          type: windows  # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
        
        variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
          ob_outputDirectory: '$(REPOROOT)\out' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
          ob_sdl_binskim_break: true # https://aka.ms/obpipelines/sdl
          # ob_sdl_baseline_baselineFile: $(Build.SourcesDirectory)\.gdn\build.nonofficial.gdnbaselines
          # ob_sdl_codeSignValidation_excludes: -|**\*.js # Example -|**\*.js;-|**\Test*\**
          ob_artifactBaseName: 'drop'
          ob_sdl_cg_failOnAlert: false

        steps:
          - checkout: AppConfiguration-DotnetProvider
            path: s/AppConfiguration-DotnetProvider

          - task: CmdLine@2
            inputs:
              targetType: 'inline'
              script: |
                cd $(Build.SourcesDirectory)/AppConfiguration-DotnetProvider/
                move /y ./*  ..
                move /y ./build ..
                move /y ./examples ..
                move /y ./tests ..
                move /y ./src ..

          - task: CmdLine@2
            displayName: 'Install .NET'
            inputs:
              script: $(Build.SourcesDirectory)\build\CallPowerShell.cmd build/install-dotnet.ps1 -RestoreOnly
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: CmdLine@2
            displayName: 'Restore'
            inputs:
              script: $(Build.SourcesDirectory)\build\CallPowerShell.cmd build.ps1 -RestoreOnly
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: onebranch.pipeline.version@1 # generates automatic version. For other versioning options check https://aka.ms/obpipelines/versioning
            displayName: 'Setup BuildNumber'
            inputs:
              system: 'BuildRevision'
              major: '1'
              minor: '0'
              name: 'Azconfig-DotnetProvider'
              # exclude_commit: true



          - task: CmdLine@2
            displayName: 'Dotnet Build'
            inputs:
              script: $(Build.SourcesDirectory)\build\CallPowerShell.cmd build.ps1
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)\buildlogs'
              Contents: |
                **/*
              TargetFolder: '$(Build.SourcesDirectory)\out\outputs\build\Build Logs'

          - task: CmdLine@2
            displayName: 'Dotnet Pack'
            inputs:
              script: $(Build.SourcesDirectory)\build\CallPowerShell.cmd pack.ps1
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)\buildlogs'
              Contents: |
                **/*
              TargetFolder: '$(Build.SourcesDirectory)\out\outputs\package\Build Logs'

          - task: CmdLine@2
            displayName: 'Dotnet Test'
            inputs:
             script: '$(Build.SourcesDirectory)\build/CallPowerShell.cmd test.ps1|| exit /b 0'
             workingDirectory: '$(Build.SourcesDirectory)'


          # - task: CopyFiles@2
          #   inputs:
          #     SourceFolder: '$(Build.SourcesDirectory)\TestResults'
          #     Contents: '**\*.trx'
          #     TargetFolder: '$(Build.SourcesDirectory)\out\outputs\test\_post_command__run_log_alerts_schedular_tests\_testresults'

          - task: PublishTestResults@2
            displayName: 'Unit Tests'
            inputs:
             testResultsFormat: 'vstest'
             testResultsFiles: '**/*.trx'
             searchFolder: ''
             failTaskOnFailedTests: False
             testRunTitle: Unit Tests


          # one CmdLine@2 for each CDPx stage (restore/build/package/test) as needed
          #- task: CmdLine@2
          #  displayName: '<name from pipeline.user.full.yml'
          #  inputs:
          #    script: '$(Build.SourcesDirectory)\<script name>'
          #    workingDirectory: '$(Build.SourcesDirectory)'

          #  One CopyFiles@2 for each CDPx artifacts entry for each stage (restore/build/package/test) as needed
          #- task: CopyFiles@2
          #  inputs:
          #    SourceFolder: '<'from' from artifacts section>'
          #    Contents: '**\*'
          #    TargetFolder: '<'to' from artifacts section
                
          # Move this block after a task block to "see" current file layout on host agent.
          # Usually this belongs at the bottom of the build ( right before inline diffs ).  
          # - task: CmdLine@2 
          #   displayName: 'Generate file list'
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       md $(Build.SourcesDirectory)\out
          #       dir /b /s * > $(Build.SourcesDirectory)\out\filelist.txt

################################################################################################
#                              Remove tasks below before handoff                               #
################################################################################################
#        ↓ 
#        ↓- task: After you uncomment below tasks, please make sure your '-' align to the first '-' of this line.
#        ↓ 
          
          # Uncomment this task if your CDPx yaml has publish_to_legacy_artifacts set to TRUE 
          - task: DownloadBuildArtifacts@1
            displayName: '⚡️Download CDPx Build Artifact'
            inputs:
              buildType: 'specific'
              project: '$(System.TeamProjectId)'
              pipeline: '287'
              buildVersionToDownload: 'specific'
              buildId: '55014'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(REPOROOT)\cdpxArt'
          
          # # Uncomment this task if your CDPx yaml has publish_to_pipeline_artifacts set to TRUE
          # - task: DownloadPipelineArtifact@2
          #   displayName: '⚡️Download CDPx Pipeline Artifact'
          #   inputs:
          #     buildType: 'specific'
          #     project: '$(System.TeamProjectId)'
          #     definition: '287'
          #     buildVersionToDownload: 'specific'
          #     pipelineId: '55014'   #Correspond the buildId in above task. The name 'pipelineId' here is a bit confusing.
          #     artifactName: 'drop'
          #     targetPath: '$(REPOROOT)\cdpxArt'
          
          # - task: Bash@3
          #   displayName: '⚡️Install Powershell'
          #   condition: ne(variables['Agent.OS'], 'Windows_NT')
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       #!/bin/bash
          #       apt-get update
          #       apt-get install -y wget apt-transport-https software-properties-common
          #       wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          #       dpkg -i packages-microsoft-prod.deb
          #       apt-get update
          #       apt-get install -y powershell
          
          # - task: PowerShell@2
          #   displayName: '⚡️Diff Build Outputs'
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       [System.Collections.ArrayList] $cdpxFiles = @()
          #       [System.Collections.ArrayList] $cdpxFolders = @()
          #       [System.Collections.ArrayList] $obpFiles = @()
          #       [System.Collections.ArrayList] $obpFolders = @()
          #       [System.Collections.ArrayList] $intersection = @()
          # 
          #       $cdpxArtifactDirectory = Join-Path $(REPOROOT) "cdpxArt"
          #       if (($(Get-ChildItem $cdpxArtifactDirectory).Count -eq 1) -and (Test-Path $(Join-Path $cdpxArtifactDirectory "drop"))) {
          #         $cdpxOutputsDirectory = Join-Path $(Join-Path $cdpxArtifactDirectory "drop") "outputs"
          #       }
          #       else {
          #         $cdpxOutputsDirectory = Join-Path $cdpxArtifactDirectory "outputs"
          #       }
          # 
          #       Get-ChildItem $cdpxOutputsDirectory -recurse -force -directory | % { $null = $cdpxFolders.Add($($_.FullName).Replace($cdpxOutputsDirectory, "")) }
          #       Get-ChildItem $cdpxOutputsDirectory -recurse -force -file | % { $null = $cdpxFiles.Add($($_.FullName).Replace($cdpxOutputsDirectory, "")) }
          #       
          #       $obpOutputsDirectory = Join-Path $(ob_outputDirectory) "outputs"
          #       Get-ChildItem $obpOutputsDirectory -recurse -force -directory | % { $null = $obpFolders.Add($($_.FullName).Replace($obpOutputsDirectory, "")) }
          #       Get-ChildItem $obpOutputsDirectory -recurse -force -file | % { $null = $obpFiles.Add($($_.FullName).Replace($obpOutputsDirectory, "")) }
          # 
          #       Write-Output "CDPx build metadata:" 
          #       Write-Output "    Directories: $($cdpxFolders.Count)"
          #       Write-Output "    Files: $($cdpxFiles.Count)"
          # 
          #       Write-Output "OBP build metadata:" 
          #       Write-Output "    Directories: $($obpFolders.Count)"
          #       Write-Output "    Files: $($obpFiles.Count)"
          #       Write-Output "--------------------------------------------------"
          #       
          #       foreach ($file in $cdpxFiles) {
          #         if ($obpFiles.Contains($file)) {
          #           $null = $intersection.Add($file)
          #         }
          #       }
          # 
          #       foreach ($file in $intersection) {
          #         $obpFiles.Remove($file)
          #         $cdpxFiles.Remove($file)
          #       }
          # 
          #       Write-Output "CDPx build files missing in OBP build:"
          #       $cdpxFiles | % { Write-Output "    $_" }
          #       Write-Output "OBP build files missing in CDPx build:"
          #       $obpFiles | % { Write-Output "    $_" }